// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: strategies.sql

package db

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createStrategy = `-- name: CreateStrategy :one
INSERT INTO strategies (
  user_id,
  name,
  indicators,
  buyconditions,
  sellconditions
) VALUES
($1, $2, $3, $4, $5) RETURNING id, user_id, name, indicators, buyconditions, sellconditions, created_at, updated_at
`

type CreateStrategyParams struct {
	UserID         sql.NullInt32         `json:"user_id"`
	Name           string                `json:"name"`
	Indicators     pqtype.NullRawMessage `json:"indicators"`
	Buyconditions  pqtype.NullRawMessage `json:"buyconditions"`
	Sellconditions pqtype.NullRawMessage `json:"sellconditions"`
}

func (q *Queries) CreateStrategy(ctx context.Context, arg CreateStrategyParams) (Strategy, error) {
	row := q.db.QueryRowContext(ctx, createStrategy,
		arg.UserID,
		arg.Name,
		arg.Indicators,
		arg.Buyconditions,
		arg.Sellconditions,
	)
	var i Strategy
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Indicators,
		&i.Buyconditions,
		&i.Sellconditions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStrategy = `-- name: DeleteStrategy :exec
delete from strategies
where id = $1
`

func (q *Queries) DeleteStrategy(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStrategy, id)
	return err
}

const getStrategiesByUser = `-- name: GetStrategiesByUser :many
select id, user_id, name, indicators, buyconditions, sellconditions, created_at, updated_at from strategies
where user_id = $1
`

func (q *Queries) GetStrategiesByUser(ctx context.Context, userID sql.NullInt32) ([]Strategy, error) {
	rows, err := q.db.QueryContext(ctx, getStrategiesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Strategy{}
	for rows.Next() {
		var i Strategy
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Indicators,
			&i.Buyconditions,
			&i.Sellconditions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
